/// <reference types="node" />
import sharp from "sharp";
declare type TImage = Buffer | string;
interface IGetImageSizeReturn {
    height: number;
    width: number;
    type?: string;
}
interface ILoadImageImg extends IGetImageSizeReturn {
    src: string;
}
interface ILoadImageReturn {
    img: ILoadImageImg;
    file: TImage;
}
interface IOptimizeImageOptions {
    size?: number;
}
interface IOptimizeImageReturn extends Record<"optimizedForBase64" | "optimizedForBlurhash" | "optimizedForCSS" | "optimizedForSVG", {
    data: Buffer;
    info: sharp.OutputInfo;
    rawBuffer: number[];
    rows: number[][][];
}> {
}
export declare type TGetImageSrc = TImage;
export interface IGetImageOptions extends IOptimizeImageOptions {
}
export interface IGetImageReturn extends Omit<ILoadImageReturn, "file">, IOptimizeImageReturn {
}
export interface IGetImage {
    (src: TGetImageSrc, options?: IGetImageOptions): Promise<IGetImageReturn>;
}
export declare const getImage: IGetImage;
export {};
