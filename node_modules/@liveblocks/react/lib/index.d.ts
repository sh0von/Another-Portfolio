import { Client, RecordData, Others, Presence, Record, InitialStorageFactory, Room, User } from "@liveblocks/client";
import * as React from "react";
declare type LiveblocksProviderProps = {
    children: React.ReactNode;
    client: Client;
};
/**
 * Makes the Liveblocks client available in the component hierarchy below.
 */
export declare function LiveblocksProvider(props: LiveblocksProviderProps): JSX.Element;
declare type RoomProviderProps = {
    /**
     * The id of the room you want to connect to
     */
    id: string;
    /**
     * A callback that let you initialize the default presence when entering the room.
     * If ommited, the default presence will be an empty object
     */
    defaultPresence?: () => Presence;
    children: React.ReactNode;
};
/**
 * Makes a Room available in the component hierarchy below.
 * When this component is unmounted, the current user leave the room.
 * That means that you can't have 2 RoomProvider with the same room id in your react tree.
 */
export declare function RoomProvider({ id, children, defaultPresence, }: RoomProviderProps): JSX.Element;
/**
 * Returns the presence of the current user of the current room, and a function to update it.
 * It is different from the setState function returned by the useState hook from React.
 * You don't need to pass the full presence object to update it.
 *
 * ### Example
 * ``` typescript
 * import { useMyPresence } from "@liveblocks/react";
 *
 * const [myPresence, updateMyPresence] = useMyPresence();
 * updateMyPresence({ x: 0 });
 * updateMyPresence({ y: 0 });
 *
 * // At the next render, "myPresence" will be equal to "{ x: 0, y: 0 }"
 * ```
 */
export declare function useMyPresence<T extends Presence>(): [
    T,
    (overrides: Partial<T>) => void
];
/**
 * useUpdateMyPresence is similar to useMyPresence but it only returns the function to update the current user presence.
 * If you don't use the current user presence in your component, but you need to update it (e.g. live cursor), it's better to use useUpdateMyPresence to avoid unnecessary renders.
 *
 * ### Example
 * ``` typescript
 * import { useUpdateMyPresence } from "@liveblocks/react";
 *
 * const updateMyPresence = useUpdateMyPresence();
 * updateMyPresence({ x: 0 });
 * updateMyPresence({ y: 0 });
 *
 * // At the next render, the presence of the current user will be equal to "{ x: 0, y: 0 }"
 * ```
 */
export declare function useUpdateMyPresence<T extends Presence>(): (overrides: Partial<T>) => void;
/**
 * Returns an object that lets you get information about all the the users currently connected in the room.
 *
 * ### Example
 * ``` typescript
 * import { useOthers } from "@liveblocks/react";
 *
 * const others = useOthers();
 *
 * // Example to map all cursors in jsx
 * {
 *   others.map(({ connectionId, presence }) => {
 *     if(presence == null || presence.cursor == null) {
 *       return null;
 *     }
 *     return <Cursor key={connectionId} cursor={presence.cursor} />
 *   })
 * }
 * ```
 */
export declare function useOthers<T extends Presence>(): Others<T>;
/**
 * Returns a callback that lets you broadcast custom events to other users in the room
 *
 * ### Example
 * ``` typescript
 * import { useBroadcastEvent } from "@liveblocks/react";
 *
 * const broadcast = useBroadcastEvent();
 *
 * broadcast({ type: "CUSTOM_EVENT", data: { x: 0, y: 0 } });
 * ```
 */
export declare function useBroadcastEvent(): (event: any) => void;
/**
 * useErrorListener is a react hook that lets you react to potential room connection errors.
 *
 * ### Example
 * ``` typescript
 * import { useErrorListener } from "@liveblocks/react";
 *
 * useErrorListener(er => {
 *   console.error(er);
 * })
 * ```
 */
export declare function useErrorListener(callback: (er: Error) => void): void;
/**
 * useEventListener is a react hook that lets you react to event broadcasted by other users in the room.
 *
 * ### Example
 * ``` typescript
 * import { useEventListener } from "@liveblocks/react";
 *
 * useEventListener(({ connectionId, event }) => {
 *   if (event.type === "CUSTOM_EVENT") {
 *     // Do something
 *   }
 * });
 * ```
 */
export declare function useEventListener<TEvent>(callback: ({ connectionId, event, }: {
    connectionId: number;
    event: TEvent;
}) => void): void;
/**
 * Gets the current user once it is connected to the room.
 *
 * ### Example
 * ``` typescript
 * import { useSelf } from "@liveblocks/react";
 *
 * const user = useSelf();
 * ```
 */
export declare function useSelf<TPresence extends Presence = Presence>(): User<TPresence> | null;
declare type StorageActions = {
    createRecord: Room["createRecord"];
    updateRecord: Room["updateRecord"];
    createList: Room["createList"];
    moveItem: Room["moveItem"];
    deleteItem: Room["deleteItem"];
    deleteItemById: Room["deleteItemById"];
    pushItem: Room["pushItem"];
};
export declare function useStorage<TRoot extends RecordData>(initialStorage: InitialStorageFactory<TRoot>): [root: Record<TRoot> | null, actions: StorageActions];
export declare function useStorageActions(): StorageActions;
export {};
