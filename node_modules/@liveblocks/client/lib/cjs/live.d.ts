import { Presence } from "./types";
export declare type ServerMessage = UpdatePresenceMessage | UserJoinMessage | UserLeftMessage | EventMessage | RoomStateMessage | InitialDocumentStateMessage | UpdateStorageMessage;
export declare enum ServerMessageType {
    UpdatePresence = 100,
    UserJoined = 101,
    UserLeft = 102,
    Event = 103,
    RoomState = 104,
    InitialStorageState = 200,
    UpdateStorage = 201
}
export declare type RoomStateMessage = {
    type: ServerMessageType.RoomState;
    users: {
        [actor: number]: {
            id?: string;
            info?: any;
        };
    };
};
export declare type UpdatePresenceMessage = {
    type: ServerMessageType.UpdatePresence;
    actor: number;
    data: Presence;
};
export declare type UserJoinMessage = {
    type: ServerMessageType.UserJoined;
    actor: number;
    id?: string;
    info?: string;
};
export declare type UserLeftMessage = {
    type: ServerMessageType.UserLeft;
    actor: number;
};
export declare type EventMessage = {
    type: ServerMessageType.Event;
    actor: number;
    event: any;
};
export declare type InitialDocumentStateMessage = {
    type: ServerMessageType.InitialStorageState;
    root: SerializedRecord | null;
};
export declare type UpdateStorageMessage = {
    type: ServerMessageType.UpdateStorage;
    ops: Op[];
};
export declare type ClientMessage = ClientEventMessage | UpdatePresenceClientMessage | UpdateStorageClientMessage | FetchStorageClientMessage;
export declare enum ClientMessageType {
    UpdatePresence = 100,
    ClientEvent = 103,
    FetchStorage = 200,
    UpdateStorage = 201
}
export declare type ClientEventMessage = {
    type: ClientMessageType.ClientEvent;
    event: any;
};
export declare type UpdatePresenceClientMessage = {
    type: ClientMessageType.UpdatePresence;
    data: Presence;
    targetActor?: number;
};
export declare type UpdateStorageClientMessage = {
    type: ClientMessageType.UpdateStorage;
    ops: Op[];
};
export declare type FetchStorageClientMessage = {
    type: ClientMessageType.FetchStorage;
};
export declare enum CrdtType {
    Record = 0,
    List = 1,
    Register = 2
}
export declare type SerializedRecord = {
    id: string;
    type: CrdtType.Record;
    data: {
        [key: string]: SerializedCrdt;
    };
};
export declare type SerializedList = {
    id: string;
    type: CrdtType.List;
    data: {
        [position: string]: SerializedCrdt;
    };
};
export declare type SerializedRegister = {
    id?: string;
    type: CrdtType.Register;
    data: any;
};
export declare type SerializedCrdt = SerializedRecord | SerializedList | SerializedRegister;
export declare enum OpType {
    Init = 100,
    ListInsert = 200,
    ListMove = 201,
    ListRemove = 202,
    RecordUpdate = 300
}
export declare type Op = RecordUpdateOp | ListInsertOp | ListDeleteOp | ListMoveOp;
export declare type RecordUpdateOp = {
    id: string;
    type: OpType.RecordUpdate;
    data: {
        [key: string]: SerializedCrdt;
    };
};
export declare type ListInsertOp = {
    id: string;
    type: OpType.ListInsert;
    position: string;
    data: SerializedCrdt;
};
export declare type ListMoveOp = {
    id: string;
    type: OpType.ListMove;
    itemId: string;
    position: string;
};
export declare type ListDeleteOp = {
    id: string;
    type: OpType.ListRemove;
    itemId: string;
};
export declare enum WebsocketCloseCodes {
    CLOSE_ABNORMAL = 1006,
    INVALID_MESSAGE_FORMAT = 4000,
    NOT_ALLOWED = 4001,
    MAX_NUMBER_OF_MESSAGES_PER_SECONDS = 4002,
    MAX_NUMBER_OF_CONCURRENT_CONNECTIONS = 4003,
    MAX_NUMBER_OF_MESSAGES_PER_DAY_PER_APP = 4004,
    MAX_NUMBER_OF_CONCURRENT_CONNECTIONS_PER_ROOM = 4005
}
