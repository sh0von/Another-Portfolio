import { RecordData, List } from ".";
import { Doc, Record } from "./doc";
import { Others, Presence, ClientOptions, Room, InitialStorageFactory, MyPresenceCallback, OthersEventCallback, StorageCallback, AuthEndpoint, LiveStorageState, LiveStorage, EventCallback, User, Connection, Serializable, ErrorCallback, AuthenticationToken, ConnectionCallback } from "./types";
import { ClientMessage, Op } from "./live";
declare type IdFactory = () => string;
export declare type State = {
    connection: Connection;
    socket: WebSocket | null;
    lastFlushTime: number;
    flushData: {
        presence: Presence | null;
        messages: ClientMessage[];
        storageOperations: Op[];
    };
    timeoutHandles: {
        flush: number | null;
        reconnect: number;
        pongTimeout: number;
    };
    intervalHandles: {
        heartbeat: number;
    };
    listeners: {
        storage: StorageCallback[];
        event: EventCallback[];
        others: OthersEventCallback[];
        "my-presence": MyPresenceCallback[];
        error: ErrorCallback[];
        connection: ConnectionCallback[];
    };
    me: Presence;
    others: Others;
    users: {
        [connectionId: number]: User;
    };
    idFactory: IdFactory | null;
    numberOfRetry: number;
    doc: Doc<any> | null;
    storageState: LiveStorageState;
    initialStorageFactory: InitialStorageFactory | null;
};
export declare type Effects = {
    authenticate(): void;
    send(messages: ClientMessage[]): void;
    delayFlush(delay: number): number;
    startHeartbeatInterval(): number;
    schedulePongTimeout(): number;
    scheduleReconnect(delay: number): number;
};
declare type Context = {
    room: string;
    authEndpoint: AuthEndpoint;
    liveblocksServer: string;
    throttleDelay: number;
};
export declare function makeStateMachine(state: State, context: Context, mockedEffects?: Effects): {
    onOpen: () => void;
    onClose: (event: {
        code: number;
        wasClean: boolean;
        reason: any;
    }) => void;
    onMessage: (event: MessageEvent) => void;
    authenticationSuccess: (token: AuthenticationToken, socket: WebSocket) => void;
    heartbeat: () => void;
    onNavigatorOnline: () => void;
    onVisibilityChange: (visibilityState: VisibilityState) => void;
    connect: () => null | undefined;
    disconnect: () => void;
    subscribe: {
        <T extends Serializable>(type: "my-presence", listener: MyPresenceCallback<T>): void;
        <T_1 extends Serializable>(type: "others", listener: OthersEventCallback<T_1>): void;
        (type: "event", listener: EventCallback): void;
        <T_2 extends RecordData>(type: "storage", listener: StorageCallback<T_2>): void;
        (type: "error", listener: ErrorCallback): void;
        (type: "connection", listener: ConnectionCallback): void;
    };
    unsubscribe: {
        <T_3 extends Serializable>(type: "my-presence", listener: MyPresenceCallback<T_3>): void;
        <T_4 extends Serializable>(type: "others", listener: OthersEventCallback<T_4>): void;
        (type: "event", listener: EventCallback): void;
        <T_5 extends RecordData>(type: "storage", listener: StorageCallback<T_5>): void;
        (type: "error", listener: ErrorCallback): void;
        (type: "connection", listener: ConnectionCallback): void;
    };
    updatePresence: <T_6 extends Serializable>(overrides: Partial<T_6>) => void;
    broadcastEvent: (event: any) => void;
    fetchStorage: (initialStorageFactory: InitialStorageFactory) => void;
    createRecord: <T_7 extends RecordData>(data: any) => Record<T_7>;
    updateRecord: <T_8 extends RecordData>(record: Record<T_8>, overrides: Partial<T_8>) => void;
    createList: <T_9 extends RecordData>() => List<Record<T_9>>;
    pushItem: <T_10 extends RecordData>(list: List<Record<T_10>>, item: Record<T_10>) => void;
    deleteItem: <T_11 extends RecordData>(list: List<Record<T_11>>, index: number) => void;
    deleteItemById: <T_12 extends RecordData>(list: List<Record<T_12>>, itemId: string) => void;
    moveItem: <T_13 extends RecordData>(list: List<Record<T_13>>, index: number, targetIndex: number) => void;
    selectors: {
        getConnectionState: () => "failed" | "closed" | "open" | "connecting" | "authenticating" | "unavailable";
        getSelf: <TPresence extends Serializable = Serializable>() => User<TPresence> | null;
        getPresence: <T_14 extends Serializable>() => T_14;
        getOthers: <T_15 extends Serializable>() => Others<T_15>;
        getStorage: () => LiveStorage;
    };
};
export declare function defaultState(me?: Presence): State;
export declare type InternalRoom = {
    room: Room;
    connect: () => void;
    disconnect: () => void;
    onNavigatorOnline: () => void;
    onVisibilityChange: (visibilityState: VisibilityState) => void;
};
export declare function createRoom(name: string, options: ClientOptions & {
    initialPresence?: Presence;
}): InternalRoom;
export {};
