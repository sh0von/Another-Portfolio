var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import fetch from "node-fetch";
export function authorize(options) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const result = yield fetch(options.liveblocksAuthorizeEndpoint ||
                "https://liveblocks.io/api/authorize", {
                method: "POST",
                headers: {
                    Authorization: `Bearer: ${options.secret}`,
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    room: options.room,
                    userId: options.userId,
                    userInfo: options.userInfo,
                }),
            });
            if (!result.ok) {
                return {
                    status: 403,
                    body: yield result.text(),
                };
            }
            return {
                status: 200,
                body: yield result.text(),
            };
        }
        catch (er) {
            return {
                status: 403,
                body: `Call to "https://liveblocks.io/api/authorize" failed. See "error" for more information.`,
                error: er,
            };
        }
    });
}
