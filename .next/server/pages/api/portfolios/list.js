"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/portfolios/list";
exports.ids = ["pages/api/portfolios/list"];
exports.modules = {

/***/ "@notionhq/client":
/*!***********************************!*\
  !*** external "@notionhq/client" ***!
  \***********************************/
/***/ ((module) => {

module.exports = require("@notionhq/client");

/***/ }),

/***/ "@sendgrid/mail":
/*!*********************************!*\
  !*** external "@sendgrid/mail" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@sendgrid/mail");

/***/ }),

/***/ "(api)/./pages/api/portfolios/list.js":
/*!**************************************!*\
  !*** ./pages/api/portfolios/list.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst {\n  Client\n} = __webpack_require__(/*! @notionhq/client */ \"@notionhq/client\");\n\nconst mail = __webpack_require__(/*! @sendgrid/mail */ \"@sendgrid/mail\");\n\nconst notion = new Client({\n  auth: process.env.NOTION_API_KEY\n});\n\nconst triggerEmail = data => {\n  mail.setApiKey(process.env.SENDGRID_API_KEY);\n  const message = {\n    to: 'parag.ryan@gmail.com',\n    from: 'parag.ryan@gmail.com',\n    subject: `New portfolio added`,\n    text: data.portfolio.name,\n    html: data.portfolio.name\n  };\n  mail.send(message).then(() => {\n    console.log('Email sent');\n  }).catch(error => {\n    console.error(error);\n  });\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (async (req, res) => {\n  if (req.method === 'POST') {\n    const getTags = () => {\n      const tags = [];\n      req.body.portfolio.tags.map(item => {\n        tags.push({\n          name: item\n        });\n      });\n      return tags;\n    };\n\n    const response = await notion.pages.create({\n      parent: {\n        database_id: process.env.NOTION_PORTFOLIO_DATABASE_ID\n      },\n      properties: {\n        Name: {\n          title: [{\n            text: {\n              content: req.body.portfolio.name\n            }\n          }]\n        },\n        Portfolio: {\n          url: req.body.portfolio.link\n        },\n        Likes: {\n          number: 1\n        },\n        Password: {\n          checkbox: req.body.portfolio.password\n        },\n        Verified: {\n          checkbox: false\n        },\n        Tags: {\n          multi_select: getTags()\n        },\n        Description: {\n          rich_text: [{\n            text: {\n              content: req.body.portfolio.description\n            }\n          }]\n        }\n      }\n    });\n    triggerEmail(req.body);\n    res.status(201).json(req.body.portfolio);\n  } else {\n    const response = await notion.databases.query({\n      database_id: process.env.NOTION_PORTFOLIO_DATABASE_ID\n    });\n    const portfolios = {\n      verified: [],\n      waiting: []\n    };\n    response.results.map(item => {\n      const getTags = () => {\n        const items = [];\n\n        if (item.properties.Tags.multi_select.length > 0) {\n          item.properties.Tags.multi_select.map(tag => {\n            items.push(tag.name);\n          });\n        }\n\n        return items;\n      };\n\n      const data = {\n        id: item.id,\n        name: item.properties.Name.title[0].plain_text,\n        description: item.properties.Description.rich_text[0].plain_text,\n        password: item.properties.Password.checkbox,\n        link: item.properties.Portfolio.url,\n        likes: item.properties.Likes.number,\n        created: item.created_time,\n        tags: getTags()\n      };\n\n      if (item.properties.Verified.checkbox) {\n        portfolios.verified.push(data);\n      } else {\n        portfolios.waiting.push(data);\n      }\n    });\n    portfolios.verified.sort((a, b) => a.likes > b.likes ? -1 : 1);\n    portfolios.waiting.sort((a, b) => a.created > b.created ? -1 : 1);\n    res.status(200).json({\n      portfolios\n    });\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/portfolios/list.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/portfolios/list.js"));
module.exports = __webpack_exports__;

})();